1.
We should get acquainted with the movies table.

In the editor, type the following:

SELECT * FROM movies;


What are the column names?

*****************

Queries
Select
2 min
Previously, we learned that 
Preview: Docs Every SQL query will begin with the SELECT command to fetch data from one or more tables.
SELECT
 is used every time you want to query data from a database and * means all columns.

Suppose we are only interested in two of the columns. We can select individual columns by their names (separated by a comma):

SELECT column1, column2 
FROM table_name;


To make it easier to read, we moved FROM to another line.

Line breaks don’t mean anything specific in SQL. We could write this entire query in one line, and it would run just fine.

Instructions

Checkpoint 1 Enabled
1.
Let’s only select the name and genre columns of the table.

In the code editor, type the following:

SELECT name, genre 
FROM movies;


Checkpoint 2 Step instruction is unavailable until previous steps are completed
2.
Now we want to include a third column.

Edit your query so that it returns the name, genre, and year columns of the table.

***********************

Queries 6

Like I
2 min
Preview: Docs Loading link description
LIKE
 can be a useful operator when you want to compare similar values.

The movies table contains two films with similar titles, ‘Se7en’ and ‘Seven’.

How could we select all movies that start with ‘Se’ and end with ‘en’ and have exactly one character in the middle?

SELECT * 
FROM movies
WHERE name LIKE 'Se_en';


LIKE is a special operator used with the 
Preview: Docs Loading link description
WHERE
 clause to search for a specific pattern in a column.

name LIKE 'Se_en' is a condition evaluating the name column for a specific pattern.

Se_en represents a pattern with a wildcard character.

The _ means you can substitute any individual character here without breaking the pattern. The names Seven and Se7en both match this pattern.

Instructions
Checkpoint 1 Enabled
1.
Let’s test it out.

In the code editor, type:

SELECT * 
FROM movies
WHERE name LIKE 'Se_en';

***********************

Queries 7

Queries
Like II
4 min
The percentage sign % is another wildcard character that can be used with 
Preview: Docs Loading link description
LIKE
.

This statement below filters the result set to only include movies with names that begin with the letter ‘A’:

SELECT * 
FROM movies
WHERE name LIKE 'A%';


% is a wildcard character that matches zero or more missing characters in the pattern. For example:

A% matches all movies with names that begin with letter ‘A’
%a matches all movies that end with ‘a’
We can also use % both before and after a pattern:

SELECT * 
FROM movies 
WHERE name LIKE '%man%';


Here, any movie that contains the word ‘man’ in its name will be returned in the result.

LIKE is not case sensitive. ‘Batman’ and ‘Man of Steel’ will both appear in the result of the query above.

Instructions
Checkpoint 1 Passed
1.
In the text editor, type:

SELECT * 
FROM movies
WHERE name LIKE '%man%';


How many movie titles contain the word ‘man’?

Checkpoint 2 Passed
2.
Let’s try one more.

Edit the query so that it selects all the information about the movie titles that begin with the word ‘The’.

You might need a space in there!


SELECT * 
FROM movies 
WHERE name LIKE 'The %';


***********************

Queries 8

Queries
Is Null
2 min
By this point of the lesson, you might have noticed that there are a few missing values in the movies table. More often than not, the data you encounter will have missing values.

Unknown values are indicated by NULL.

It is not possible to test for NULL values with comparison operators, such as = and !=.

Instead, we will have to use these operators:

Preview: Docs Loading link description
IS NULL
Preview: Docs Loading link description
IS NOT NULL
To filter for all movies with an IMDb rating:

SELECT name
FROM movies 
WHERE imdb_rating IS NOT NULL;


Instructions
Checkpoint 1 Passed
1.
Now let’s do the opposite.

Write a query to find all the movies without an IMDb rating.

Select only the name column!


SELECT name
FROM movies 
WHERE imdb_rating IS NULL;


***********************

Queries 9

Queries
Between
7 min
The 
Preview: Docs Selects values, inclusively of beginning and end values, within a given range. BETWEEN works with numbers, text, or date data types.
BETWEEN
 operator is used in a 
Preview: Docs Filters records (rows) that match a certain condition.
WHERE
 clause to filter the result set within a certain range. It accepts two values that are either numbers, text or dates.

For example, this statement filters the result set to only include movies with years from 1990 up to, and including 1999.

SELECT *
FROM movies
WHERE year BETWEEN 1990 AND 1999;


When the values are text, BETWEEN filters the result set for within the alphabetical range.

In this statement, BETWEEN filters the result set to only include movies with names that begin with the letter ‘A’ up to, but not including ones that begin with ‘J’.

SELECT *
FROM movies
WHERE name BETWEEN 'A' AND 'J';


However, if a movie has a name of simply ‘J’, it would actually match. This is because BETWEEN goes up to the second value — up to ‘J’. So the movie named ‘J’ would be included in the result set but not ‘Jaws’.

Instructions
Checkpoint 1 Passed
1.
Using the BETWEEN operator, write a query that selects all information about movies whose name begins with the letters ‘D’, ‘E’, and ‘F’.

Checkpoint 2 Enabled
2.
Using the BETWEEN operator, write a new query that selects all information about movies that were released from the year 1970 up to and including 1979.


SELECT *
FROM movies
WHERE name BETWEEN 'D' AND 'G';


SELECT *
FROM movies
WHERE year BETWEEN 1970 AND 1979;

***********************

Queries 10

Queries
And
5 min
Sometimes we want to combine multiple conditions in a 
Preview: Docs Loading link description
WHERE
 clause to make the result set more specific and useful.

One way of doing this is to use the 
Preview: Docs Tests if all conditions in a given expression evaluate to TRUE.
AND
 operator. Here, we use the AND operator to only return 90’s romance movies.

SELECT * 
FROM movies
WHERE year BETWEEN 1990 AND 1999
   AND genre = 'romance';


year BETWEEN 1990 AND 1999 is the 1st condition.

genre = 'romance' is the 2nd condition.

AND combines the two conditions.

AND Venn Diagram

With AND, both conditions must be true for the row to be included in the result.

Instructions
Checkpoint 1 Passed
1.
In the previous exercise, we retrieved every movie released in the 1970’s.

Now, let’s retrieve every movie released in the 70’s, that’s also well received.

In the code editor, type:

SELECT *
FROM movies
WHERE year BETWEEN 1970 AND 1979
  AND imdb_rating > 8;


Checkpoint 2 Enabled
2.
Remove the previous query.

Suppose we have a picky friend who only wants to watch old horror films.

Using AND, write a new query that selects all movies made prior to 1985 that are also in the horror genre.


SELECT * 
FROM movies
WHERE year BETWEEN 1970 AND 1979
  AND imdb_rating > 8;


SELECT * 
FROM movies
WHERE year < 1985
  AND genre = 'horror';



***********************

Queries 11

Or
3 min
Similar to AND, the OR operator can also be used to combine multiple conditions in 
Preview: Docs Filters records (rows) that match a certain condition.
WHERE
, but there is a fundamental difference:

Preview: Docs Loading link description
AND
 operator displays a row if all the conditions are true.
Preview: Docs Loading link description
OR
 operator displays a row if any condition is true.
Suppose we want to check out a new movie or something action-packed:

SELECT *
FROM movies
WHERE year > 2014
   OR genre = 'action';


year > 2014 is the 1st condition.

genre = 'action' is the 2nd condition.

OR combines the two conditions.

OR Venn Diagram

With OR, if any of the conditions are true, then the row is added to the result.

Instructions
Checkpoint 1 Passed
1.
Let’s test this out:

SELECT *
FROM movies
WHERE year > 2014
   OR genre = 'action';


Checkpoint 2 Enabled
2.
Suppose we are in the mood for a good laugh or a good cry.

Using OR, write a query that returns all movies that are either a romance or a comedy.

SELECT *
FROM movies
WHERE year > 2014
   OR genre = 'action';


SELECT *
FROM movies
WHERE genre = 'romance'
   OR genre = 'comedy';

***********************

Queries 12

Queries
Order By
5 min
That’s it with 
Preview: Docs Loading link description
WHERE
 and its 
Preview: Docs Loading link description
operators
. Moving on!

It is often useful to list the data in our result set in a particular order.

We can sort the results using 
Preview: Docs Loading link description
ORDER BY
, either alphabetically or numerically. Sorting the results often makes the data more useful and easier to analyze.

For example, if we want to sort everything by the movie’s title from A through Z:

SELECT *
FROM movies
ORDER BY name;


ORDER BY is a clause that indicates you want to sort the result set by a particular column.

name is the specified column.

Sometimes we want to sort things in a decreasing order. For example, if we want to select all of the well-received movies, sorted from highest to lowest by their year:

SELECT *
FROM movies
WHERE imdb_rating > 8
ORDER BY year DESC;


DESC is a keyword used in ORDER BY to sort the results in descending order (high to low or Z-A).

ASC is a keyword used in ORDER BY to sort the results in ascending order (low to high or A-Z).

The column that we ORDER BY doesn’t even have to be one of the columns that we’re displaying.

Note: ORDER BY always goes after WHERE (if WHERE is present).

Instructions
Checkpoint 1 Enabled
1.
Suppose we want to retrieve the name and year columns of all the movies, ordered by their name alphabetically.

Type the following code:

SELECT name, year
FROM movies
ORDER BY name;


Checkpoint 2 Step instruction is unavailable until previous steps are completed
2.
Your turn! Remove the previous query.

Write a new query that retrieves the name, year, and imdb_rating columns of all the movies, ordered highest to lowest by their ratings.


SELECT name, year, imdb_rating
FROM movies
ORDER BY imdb_rating DESC;

***********************

Queries 13

Limit
3 min
We’ve been working with a fairly small table (fewer than 250 rows), but most SQL tables contain hundreds of thousands of records. In those situations, it becomes important to cap the number of rows in the result.

For instance, imagine that we just want to see a few examples of records.

SELECT *
FROM movies
LIMIT 10;


Preview: Docs Loading link description
LIMIT
 is a clause that lets you specify the maximum number of rows the result set will have. This saves space on our screen and makes our queries run faster.

Here, we specify that the result set can’t have more than 10 rows.

LIMIT always goes at the very end of the query. Also, it is not supported in all SQL databases.

Instructions
Checkpoint 1 Enabled
1.
Combining your knowledge of LIMIT and ORDER BY, write a query that returns the top 3 highest rated movies.

Select all the columns.


SELECT *
FROM movies
ORDER BY imdb_rating DESC
LIMIT 3;

***********************

Queries 14

Case
8 min
A 
Preview: Docs Returns different output based on the conditions of each statement.
CASE
 statement allows us to create different outputs (usually in the 
Preview: Docs Loading link description
SELECT
 statement). It is SQL’s way of handling if-then logic.

Suppose we want to condense the ratings in movies to three levels:

If the rating is above 8, then it is Fantastic.
If the rating is above 6, then it is Poorly Received.
Else, Avoid at All Costs.

SELECT name,
 CASE
  WHEN imdb_rating > 8 THEN 'Fantastic'
  WHEN imdb_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END
FROM movies;


Each WHEN tests a condition and the following THEN gives us the string if the condition is true.
The ELSE gives us the string if all the above conditions are false.
The CASE statement must end with END.
In the result, you have to scroll right because the column name is very long. To shorten it, we can rename the column to ‘Review’ using 
Preview: Docs Loading link description
AS
:

SELECT name,
 CASE
  WHEN imdb_rating > 8 THEN 'Fantastic'
  WHEN imdb_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END AS 'Review'
FROM movies;


Instructions
Checkpoint 1 Enabled
1.
Let’s try one on your own.

Select the name column and use a CASE statement to create the second column that is:

‘Chill’ if genre = 'romance'
‘Chill’ if genre = 'comedy'
‘Intense’ in all other cases
Optional: Rename the whole CASE statement to ‘Mood’ using AS.

Give it your best shot! Check hint for the answer.



SELECT name,
 CASE
  WHEN genre = 'romance' THEN 'Chill'
  WHEN genre = 'comedy' THEN 'Chill'
  ELSE 'Intense'
 END AS 'Mood'
FROM movies;

***********************

Queries 15

Review
<1 min
Congratulations!

We just learned how to query data from a database using SQL. We also learned how to filter queries to make the information more specific and useful.

Let’s summarize:

Preview: Docs Every SQL query will begin with the SELECT command to fetch data from one or more tables.
SELECT
 is the clause we use every time we want to query information from a database.
Preview: Docs Loading link description
AS
 renames a column or table.
Preview: Docs Loading link description
DISTINCT
 return unique values.
Preview: Docs Loading link description
WHERE
 is a popular command that lets you filter the results of the query based on conditions that you specify.
Preview: Docs Loading link description
LIKE
 and 
Preview: Docs Loading link description
BETWEEN
 are special operators.
Preview: Docs Loading link description
AND
 and 
Preview: Docs Loading link description
OR
 combines multiple conditions.
Preview: Docs Loading link description
ORDER BY
 sorts the result.
Preview: Docs Loading link description
LIMIT
 specifies the maximum number of rows that the query will return.
Preview: Docs Loading link description
CASE
 creates different outputs.
Instructions
Feel free to experiment a bit more with the movies table before moving on!

SELECT name,
 CASE
  WHEN genre = 'romance' AND year > 1990 THEN 'Chocolate time'
  WHEN genre = 'comedy' OR 'Action' THEN 'Power time'
  ELSE 'Not in the scale'
 END AS 'Popcorn!'
FROM movies
ORDER BY imdb_rating DESC
LIMIT 15;






